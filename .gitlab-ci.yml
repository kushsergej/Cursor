stages:
  - backup

backup_db:
  stage: backup
  image: mcr.microsoft.com/azure-cli
  script:
    - |
      set -e
      # Install utility packages (jq for JSON parsing, curl for notifications, mailutils optional, pg_dump)
      apt-get update -y && apt-get install -y jq curl postgresql-client > /dev/null

      # Log function
      echo_log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"; }

      echo_log "Starting Azure authentication..."
      az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
      az account set --subscription "$AZURE_SUBSCRIPTION_ID"
      echo_log "Authenticated to Azure."

      echo_log "Checking for Recovery Services Vault: $AZURE_VAULT_NAME in resource group: $AZURE_RESOURCE_GROUP..."
      VAULT_EXISTS=$(az backup vault list --resource-group "$AZURE_RESOURCE_GROUP" --query "[?name=='$AZURE_VAULT_NAME'] | length(@)")
      if [ "$VAULT_EXISTS" -eq 0 ]; then
        echo_log "Vault does not exist. Creating..."
        az backup vault create --name "$AZURE_VAULT_NAME" --resource-group "$AZURE_RESOURCE_GROUP"
        echo_log "Vault created."
      else
        echo_log "Vault already exists."
      fi
      echo_log "Vault check complete."

      # PostgreSQL backup and upload logic
      echo_log "Listing all Azure PostgreSQL servers in the subscription..."
      PG_SERVERS=$(az postgres server list --query "[].name" -o tsv)
      for SERVER in $PG_SERVERS; do
        echo_log "Processing server: $SERVER"
        SERVER_INFO=$(az postgres server show --name "$SERVER" --resource-group "$AZURE_RESOURCE_GROUP")
        SERVER_FQDN=$(echo "$SERVER_INFO" | jq -r '.fullyQualifiedDomainName')
        echo_log "Listing databases for server: $SERVER"
        DBS=$(az postgres db list --server-name "$SERVER" --resource-group "$AZURE_RESOURCE_GROUP" --query "[].name" -o tsv)
        for DB in $DBS; do
          if [ "$DB" == "postgres" ] || [ "$DB" == "azure_maintenance" ]; then
            continue
          fi
          echo_log "Backing up database: $DB on server: $SERVER"
          BACKUP_FILE="${SERVER}_${DB}_$(date +%Y%m%d%H%M%S).sql"
          PGPASSWORD="$PG_ADMIN_PASSWORD" pg_dump -h "$SERVER_FQDN" -U "$PG_ADMIN_USER@$SERVER" -d "$DB" -F c -b -v -f "$BACKUP_FILE"
          echo_log "Backup for $DB completed: $BACKUP_FILE"
          echo_log "Uploading $BACKUP_FILE to Azure Storage Account: $AZURE_STORAGE_ACCOUNT, Container: $AZURE_STORAGE_CONTAINER"
          az storage blob upload \
            --account-name "$AZURE_STORAGE_ACCOUNT" \
            --container-name "$AZURE_STORAGE_CONTAINER" \
            --name "$BACKUP_FILE" \
            --file "$BACKUP_FILE" \
            --auth-mode key
          echo_log "Upload of $BACKUP_FILE completed."
          rm -f "$BACKUP_FILE"
          echo_log "Local backup file $BACKUP_FILE removed."
        done
      done
      echo_log "All database backups and uploads completed."

      #-----------------------------------------------------------------------
      # Send email notification (optional – requires CI variables)
      #-----------------------------------------------------------------------
      STATUS="SUCCESS"
      if [ "$CI_JOB_STATUS" != "success" ]; then STATUS="FAILED"; fi
      SUBJECT="Azure PG Backup $STATUS – pipeline $CI_PIPELINE_ID"
      BODY="Backup status: $STATUS\nTimestamp: $(date)\nPipeline: $CI_PIPELINE_URL\nJob log: $CI_JOB_URL"
      if [ -n "$EMAIL_API_ENDPOINT" ] && [ -n "$EMAIL_API_KEY" ] && [ -n "$EMAIL_TO" ]; then
        echo "Sending notification email via API …"
        curl -s -X POST "$EMAIL_API_ENDPOINT" \
          -H "Authorization: Bearer $EMAIL_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"to\":\"$EMAIL_TO\",\"subject\":\"$SUBJECT\",\"text\":\"$BODY\"}" || echo "Email send failed (non-fatal)"
      else
        echo "Email variables not set – skipping email notification."
      fi
  variables:
    AZURE_CLIENT_ID: $AZURE_CLIENT_ID
    AZURE_TENANT_ID: $AZURE_TENANT_ID
    AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
    AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID
    AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
    AZURE_VAULT_NAME: $AZURE_VAULT_NAME
    EMAIL_TO: $EMAIL_TO
    EMAIL_API_ENDPOINT: $EMAIL_API_ENDPOINT
    EMAIL_API_KEY: $EMAIL_API_KEY
    PG_ADMIN_USER: $PG_ADMIN_USER
    PG_ADMIN_PASSWORD: $PG_ADMIN_PASSWORD
    AZURE_STORAGE_ACCOUNT: $AZURE_STORAGE_ACCOUNT
    AZURE_STORAGE_CONTAINER: $AZURE_STORAGE_CONTAINER
  when: manual
