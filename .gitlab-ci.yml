# GitLab CI/CD Pipeline for Azure PostgreSQL Individual Database Backup and Restore
# Uses Ansible with Azure collection for database operations
# Focuses on Azure native backup methods and individual database backups

variables:
  ANSIBLE_FORCE_COLOR: "true"
  ANSIBLE_HOST_KEY_CHECKING: "false"
  AZURE_CLIENT_ID: $AZURE_CLIENT_ID
  AZURE_SECRET: $AZURE_SECRET
  AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID
  AZURE_TENANT: $AZURE_TENANT
  POSTGRESQL_SERVER_NAME: $POSTGRESQL_SERVER_NAME
  POSTGRESQL_RESOURCE_GROUP: $POSTGRESQL_RESOURCE_GROUP
  POSTGRESQL_ADMIN_USERNAME: $POSTGRESQL_ADMIN_USERNAME
  POSTGRESQL_ADMIN_PASSWORD: $POSTGRESQL_ADMIN_PASSWORD
  STORAGE_ACCOUNT_NAME: $STORAGE_ACCOUNT_NAME
  STORAGE_CONTAINER_NAME: $STORAGE_CONTAINER_NAME
  BACKUP_RETENTION_DAYS: "30"

# Install required tools and dependencies
before_script:
  - apt-get update -qq && apt-get install -y -qq python3-pip postgresql-client jq
  - pip3 install ansible azure-cli
  - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_SECRET --tenant $AZURE_TENANT
  - az account set --subscription $AZURE_SUBSCRIPTION_ID
  - ansible-galaxy collection install -r ansible/requirements.yml

# List all databases in PostgreSQL flexible server
list_databases:
  stage: .pre
  script:
    - echo "Listing databases using Ansible..."
    - ansible-playbook -i ansible/inventory.yml ansible/playbooks/list_databases.yml -vv
  artifacts:
    paths:
      - database_list.txt
    expire_in: 1 hour
  only:
    - schedules
    - manual

# Daily automated backup using Azure native backup module for individual databases
daily_backup_azure:
  stage: build
  script:
    - echo "Starting daily Azure-native individual database backups using Ansible..."
    - ansible-playbook -i ansible/inventory.yml ansible/playbooks/azure_backup_databases.yml -vv
  artifacts:
    paths:
      - backups/
    expire_in: 1 week
  only:
    - schedules
  when: always
  allow_failure: true

# Daily automated backup with Azure native + pg_dump export to blob storage
daily_backup_complete:
  stage: build
  script:
    - echo "Starting daily complete backup (Azure native + blob storage) using Ansible..."
    - ansible-playbook -i ansible/inventory.yml ansible/playbooks/backup_databases.yml -vv
  artifacts:
    paths:
      - backups/
    expire_in: 1 week
  only:
    - schedules
  when: always
  allow_failure: true

# Manual backup on-demand using Azure native method
manual_backup_azure:
  stage: build
  script:
    - echo "Starting manual Azure-native backup using Ansible..."
    - ansible-playbook -i ansible/inventory.yml ansible/playbooks/azure_backup_databases.yml -vv
  artifacts:
    paths:
      - backups/
    expire_in: 1 month
  only:
    - manual
  when: manual

# Manual backup on-demand with complete backup method
manual_backup_complete:
  stage: build
  script:
    - echo "Starting manual complete backup using Ansible..."
    - ansible-playbook -i ansible/inventory.yml ansible/playbooks/backup_databases.yml -vv
  artifacts:
    paths:
      - backups/
    expire_in: 1 month
  only:
    - manual
  when: manual

# Manual database restore on-demand
manual_restore:
  stage: deploy
  script:
    - echo "Starting manual database restore using Ansible..."
    - ansible-playbook -i ansible/inventory.yml ansible/playbooks/restore_database.yml -vv
  artifacts:
    paths:
      - restore_workspace/
    expire_in: 1 day
  only:
    - manual
  when: manual

# Cleanup old artifacts and temporary files
cleanup:
  stage: .post
  script:
    - echo "Cleaning up temporary files..."
    - rm -rf backups/ restore_workspace/ || true
    - rm -f database_list.txt || true
  when: always

# Pipeline configuration
stages:
  - .pre
  - build
  - deploy
  - .post

# Cache pip packages for faster builds
cache:
  paths:
    - .cache/pip
