# .gitlab-ci.yml for Azure PostgreSQL Flexible Server Backup/Restore via GitLab CI/CD
# Implements requirements from Tasks/task.md
# - Service principal authentication
# - Uses az cli for all Azure operations
# - Recovery Service Vault creation/check
# - Lists all PostgreSQL flexible servers
# - Backup (manual & scheduled)
# - Restore (manual)
# - Logs all actions
#
# Required CI/CD variables (set in GitLab project settings):
#   AZURE_CLIENT_ID, AZURE_CLIENT_SECRET, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID
#   AZURE_RESOURCE_GROUP, AZURE_VAULT_NAME
#   (for restore: RESTORE_SERVER_NAME, SOURCE_SERVER_NAME, RESTORE_TIME)

stages:
  - backup
  - restore

backup_db:
  stage: backup
  image: mcr.microsoft.com/azure-cli
  script:
    - |
      set -e
      # Logging function
      echo_log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"; }

      echo_log "Starting Azure authentication..."
      az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
      az account set --subscription "$AZURE_SUBSCRIPTION_ID"
      echo_log "Authenticated to Azure."

      echo_log "Checking for Recovery Services Vault: $AZURE_VAULT_NAME in resource group: $AZURE_RESOURCE_GROUP..."
      VAULT_EXISTS=$(az backup vault list --resource-group "$AZURE_RESOURCE_GROUP" --query "[?name=='$AZURE_VAULT_NAME'] | length(@)")
      if [ "$VAULT_EXISTS" -eq 0 ]; then
        echo_log "Vault does not exist. Creating..."
        az backup vault create --name "$AZURE_VAULT_NAME" --resource-group "$AZURE_RESOURCE_GROUP"
        echo_log "Vault created."
      else
        echo_log "Vault already exists."
      fi
      echo_log "Vault check complete."

      echo_log "Listing all Azure PostgreSQL Flexible Servers in the subscription..."
      PG_SERVERS=$(az postgres flexible-server list --query "[].name" -o tsv)
      for SERVER in $PG_SERVERS; do
        echo_log "Processing server: $SERVER"
        echo_log "Triggering backup for server: $SERVER"
        # The backup is stored in the Recovery Services Vault by Azure policy
        az postgres flexible-server backup create \
          --name "$SERVER" \
          --resource-group "$AZURE_RESOURCE_GROUP"
        echo_log "Backup triggered for $SERVER."
      done
      echo_log "All server backups triggered."
  variables:
    AZURE_CLIENT_ID: $AZURE_CLIENT_ID
    AZURE_TENANT_ID: $AZURE_TENANT_ID
    AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
    AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID
    AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
    AZURE_VAULT_NAME: $AZURE_VAULT_NAME
  # Triggered manually or by schedule (periodic)
  when: manual
  only:
    - schedules
    - manual

restore_db:
  stage: restore
  image: mcr.microsoft.com/azure-cli
  script:
    - |
      set -e
      # Logging function
      echo_log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"; }
      echo_log "Starting Azure authentication..."
      az login --service-principal -u "$AZURE_CLIENT_ID" -p "$AZURE_CLIENT_SECRET" --tenant "$AZURE_TENANT_ID"
      az account set --subscription "$AZURE_SUBSCRIPTION_ID"
      echo_log "Authenticated to Azure."
      echo_log "Restoring Azure PostgreSQL Flexible Server..."
      # Required variables for restore:
      #   RESTORE_SERVER_NAME: name for the new (restored) server
      #   SOURCE_SERVER_NAME: name of the source server to restore from
      #   RESTORE_TIME: point-in-time (ISO8601, e.g. 2024-06-01T12:00:00Z)
      az postgres flexible-server restore \
        --name "$RESTORE_SERVER_NAME" \
        --resource-group "$AZURE_RESOURCE_GROUP" \
        --source-server "$SOURCE_SERVER_NAME" \
        --restore-time "$RESTORE_TIME"
      echo_log "Restore triggered for $RESTORE_SERVER_NAME from $SOURCE_SERVER_NAME at $RESTORE_TIME."
  variables:
    AZURE_CLIENT_ID: $AZURE_CLIENT_ID
    AZURE_TENANT_ID: $AZURE_TENANT_ID
    AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
    AZURE_SUBSCRIPTION_ID: $AZURE_SUBSCRIPTION_ID
    AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
    AZURE_VAULT_NAME: $AZURE_VAULT_NAME
    RESTORE_SERVER_NAME: $RESTORE_SERVER_NAME
    SOURCE_SERVER_NAME: $SOURCE_SERVER_NAME
    RESTORE_TIME: $RESTORE_TIME
  # Restore is always manual (on-demand)
  when: manual
